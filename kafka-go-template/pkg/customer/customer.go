// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     customer.avsc
 */
package customer

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type Customer struct {
	Birthdt string `json:"birthdt"`

	Fname string `json:"fname"`

	Fullname string `json:"fullname"`

	Gender string `json:"gender"`

	Id string `json:"id"`

	Lname string `json:"lname"`

	Mname string `json:"mname"`

	Suffix string `json:"suffix"`

	Title string `json:"title"`

	LargePayload string `json:"largePayload"`
}

const CustomerAvroCRC64Fingerprint = "w\xc7cX\x8bp\x90\xba"

func NewCustomer() Customer {
	r := Customer{}
	return r
}

func DeserializeCustomer(r io.Reader) (Customer, error) {
	t := NewCustomer()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeCustomerFromSchema(r io.Reader, schema string) (Customer, error) {
	t := NewCustomer()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeCustomer(r Customer, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Birthdt, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Fname, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Fullname, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Gender, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Lname, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Mname, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Suffix, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Title, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LargePayload, w)
	if err != nil {
		return err
	}
	return err
}

func (r Customer) Serialize(w io.Writer) error {
	return writeCustomer(r, w)
}

func (r Customer) Schema() string {
	return "{\"fields\":[{\"name\":\"birthdt\",\"type\":\"string\"},{\"name\":\"fname\",\"type\":\"string\"},{\"name\":\"fullname\",\"type\":\"string\"},{\"name\":\"gender\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"lname\",\"type\":\"string\"},{\"name\":\"mname\",\"type\":\"string\"},{\"name\":\"suffix\",\"type\":\"string\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"largePayload\",\"type\":\"string\"}],\"name\":\"org.ashkal.templates.data.avro.Customer\",\"type\":\"record\"}"
}

func (r Customer) SchemaName() string {
	return "org.ashkal.templates.data.avro.Customer"
}

func (_ Customer) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Customer) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Customer) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Customer) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Customer) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Customer) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Customer) SetString(v string)   { panic("Unsupported operation") }
func (_ Customer) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Customer) Get(i int) types.Field {
	switch i {
	case 0:
		w := types.String{Target: &r.Birthdt}

		return w

	case 1:
		w := types.String{Target: &r.Fname}

		return w

	case 2:
		w := types.String{Target: &r.Fullname}

		return w

	case 3:
		w := types.String{Target: &r.Gender}

		return w

	case 4:
		w := types.String{Target: &r.Id}

		return w

	case 5:
		w := types.String{Target: &r.Lname}

		return w

	case 6:
		w := types.String{Target: &r.Mname}

		return w

	case 7:
		w := types.String{Target: &r.Suffix}

		return w

	case 8:
		w := types.String{Target: &r.Title}

		return w

	case 9:
		w := types.String{Target: &r.LargePayload}

		return w

	}
	panic("Unknown field index")
}

func (r *Customer) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Customer) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ Customer) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Customer) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Customer) HintSize(int)                     { panic("Unsupported operation") }
func (_ Customer) Finalize()                        {}

func (_ Customer) AvroCRC64Fingerprint() []byte {
	return []byte(CustomerAvroCRC64Fingerprint)
}

func (r Customer) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["birthdt"], err = json.Marshal(r.Birthdt)
	if err != nil {
		return nil, err
	}
	output["fname"], err = json.Marshal(r.Fname)
	if err != nil {
		return nil, err
	}
	output["fullname"], err = json.Marshal(r.Fullname)
	if err != nil {
		return nil, err
	}
	output["gender"], err = json.Marshal(r.Gender)
	if err != nil {
		return nil, err
	}
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["lname"], err = json.Marshal(r.Lname)
	if err != nil {
		return nil, err
	}
	output["mname"], err = json.Marshal(r.Mname)
	if err != nil {
		return nil, err
	}
	output["suffix"], err = json.Marshal(r.Suffix)
	if err != nil {
		return nil, err
	}
	output["title"], err = json.Marshal(r.Title)
	if err != nil {
		return nil, err
	}
	output["largePayload"], err = json.Marshal(r.LargePayload)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Customer) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["birthdt"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Birthdt); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for birthdt")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fname"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Fname); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fname")
	}
	val = func() json.RawMessage {
		if v, ok := fields["fullname"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Fullname); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for fullname")
	}
	val = func() json.RawMessage {
		if v, ok := fields["gender"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Gender); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for gender")
	}
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["lname"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Lname); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for lname")
	}
	val = func() json.RawMessage {
		if v, ok := fields["mname"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Mname); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for mname")
	}
	val = func() json.RawMessage {
		if v, ok := fields["suffix"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Suffix); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for suffix")
	}
	val = func() json.RawMessage {
		if v, ok := fields["title"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Title); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for title")
	}
	val = func() json.RawMessage {
		if v, ok := fields["largePayload"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LargePayload); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for largePayload")
	}
	return nil
}
